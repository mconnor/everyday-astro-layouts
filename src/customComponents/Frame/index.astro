---
import './Frame.css'

// Define each ratio as its own type
// type Ratio16_9 = '16:9';
// type Ratio4_3 = '4:3';
// type Ratio1_1 = '1:1';
// type Ratio3_4 = '3:4';
// type Ratio9_16 = '9:16';
// type Ratio3_2 = '3:2';
// type Ratio2_3 = '2:3';
// type Ratio1_2 = '1:2';
// type Ratio2_1 = '2:1';
// type Ratio1_3 = '1:3';
// type Ratio3_1 = '3:1';
// type Ratio1_4 = '1:4';
// type Ratio4_1 = '4:1';

// // Define the Props type using the ratio types
// type Props = {
//   ratio:
//     | Ratio16_9
//     | Ratio4_3
//     | Ratio1_1
//     | Ratio3_4
//     | Ratio9_16
//     | Ratio3_2
//     | Ratio2_3
//     | Ratio1_2
//     | Ratio2_1
//     | Ratio1_3
//     | Ratio3_1
//     | Ratio1_4
//     | Ratio4_1;
//   children: unknown;
// };

type Props = {
  ratio:
    | '16:9'
    | '4:3'
    | '1:1'
    | '3:4'
    | '9:16'
    | '3:2'
    | '2:3'
    | '1:2'
    | '2:1'
    | '1:3'
    | '3:1'
    | '1:4'
    | '4:1'
     
     
     
     
     
     
     
     
     
  children: unknown
}

const { ratio } = Astro.props
---

<frame-l ratio={ratio}>
  <slot />
</frame-l>

<script src="./Frame.js"></script>

<!-- 
side	string	"left"	Which element to treat as the sidebar (all values but "left" are considered "right")
sideWidth	string		Represents the width of the sidebar when adjacent. If not set (null) it defaults to the sidebar's content width
contentMin	string	"50%"	A CSS percentage value. The minimum width of the content element in the horizontal configuration
space	string	"var(--s1)"	A CSS margin value representing the space between the two elements
noStretch	boolean	false	Make the adjacent elements adopt their natural height -->
